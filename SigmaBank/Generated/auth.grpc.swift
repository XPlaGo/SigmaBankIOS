// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: auth.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - xplago.sigma_bank.AuthService

/// Namespace containing generated types for the "xplago.sigma_bank.AuthService" service.
internal enum Xplago_SigmaBank_AuthService {
    /// Service descriptor for the "xplago.sigma_bank.AuthService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "xplago.sigma_bank.AuthService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "SendConfirmationCode" metadata.
        internal enum SendConfirmationCode {
            /// Request type for "SendConfirmationCode".
            internal typealias Input = Xplago_SigmaBank_SendConfirmationCodeRequest
            /// Response type for "SendConfirmationCode".
            internal typealias Output = Xplago_SigmaBank_SendConfirmationCodeResponse
            /// Descriptor for "SendConfirmationCode".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "xplago.sigma_bank.AuthService"),
                method: "SendConfirmationCode"
            )
        }
        /// Namespace for "Confirm" metadata.
        internal enum Confirm {
            /// Request type for "Confirm".
            internal typealias Input = Xplago_SigmaBank_ConfirmRequest
            /// Response type for "Confirm".
            internal typealias Output = Xplago_SigmaBank_ConfirmResponse
            /// Descriptor for "Confirm".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "xplago.sigma_bank.AuthService"),
                method: "Confirm"
            )
        }
        /// Namespace for "Register" metadata.
        internal enum Register {
            /// Request type for "Register".
            internal typealias Input = Xplago_SigmaBank_RegisterRequest
            /// Response type for "Register".
            internal typealias Output = Xplago_SigmaBank_RegisterResponse
            /// Descriptor for "Register".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "xplago.sigma_bank.AuthService"),
                method: "Register"
            )
        }
        /// Namespace for "Login" metadata.
        internal enum Login {
            /// Request type for "Login".
            internal typealias Input = Xplago_SigmaBank_LoginRequest
            /// Response type for "Login".
            internal typealias Output = Xplago_SigmaBank_LoginResponse
            /// Descriptor for "Login".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "xplago.sigma_bank.AuthService"),
                method: "Login"
            )
        }
        /// Descriptors for all methods in the "xplago.sigma_bank.AuthService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            SendConfirmationCode.descriptor,
            Confirm.descriptor,
            Register.descriptor,
            Login.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "xplago.sigma_bank.AuthService" service.
    internal static let xplago_sigmaBank_AuthService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "xplago.sigma_bank.AuthService")
}

// MARK: xplago.sigma_bank.AuthService (server)

extension Xplago_SigmaBank_AuthService {
    /// Streaming variant of the service protocol for the "xplago.sigma_bank.AuthService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    internal protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "SendConfirmationCode" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Xplago_SigmaBank_SendConfirmationCodeRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Xplago_SigmaBank_SendConfirmationCodeResponse` messages.
        func sendConfirmationCode(
            request: GRPCCore.StreamingServerRequest<Xplago_SigmaBank_SendConfirmationCodeRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Xplago_SigmaBank_SendConfirmationCodeResponse>

        /// Handle the "Confirm" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > auth required
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Xplago_SigmaBank_ConfirmRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Xplago_SigmaBank_ConfirmResponse` messages.
        func confirm(
            request: GRPCCore.StreamingServerRequest<Xplago_SigmaBank_ConfirmRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Xplago_SigmaBank_ConfirmResponse>

        /// Handle the "Register" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > auth required
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Xplago_SigmaBank_RegisterRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Xplago_SigmaBank_RegisterResponse` messages.
        func register(
            request: GRPCCore.StreamingServerRequest<Xplago_SigmaBank_RegisterRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Xplago_SigmaBank_RegisterResponse>

        /// Handle the "Login" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > auth required
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Xplago_SigmaBank_LoginRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Xplago_SigmaBank_LoginResponse` messages.
        func login(
            request: GRPCCore.StreamingServerRequest<Xplago_SigmaBank_LoginRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Xplago_SigmaBank_LoginResponse>
    }

    /// Service protocol for the "xplago.sigma_bank.AuthService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    internal protocol ServiceProtocol: Xplago_SigmaBank_AuthService.StreamingServiceProtocol {
        /// Handle the "SendConfirmationCode" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Xplago_SigmaBank_SendConfirmationCodeRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Xplago_SigmaBank_SendConfirmationCodeResponse` message.
        func sendConfirmationCode(
            request: GRPCCore.ServerRequest<Xplago_SigmaBank_SendConfirmationCodeRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Xplago_SigmaBank_SendConfirmationCodeResponse>

        /// Handle the "Confirm" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > auth required
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Xplago_SigmaBank_ConfirmRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Xplago_SigmaBank_ConfirmResponse` message.
        func confirm(
            request: GRPCCore.ServerRequest<Xplago_SigmaBank_ConfirmRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Xplago_SigmaBank_ConfirmResponse>

        /// Handle the "Register" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > auth required
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Xplago_SigmaBank_RegisterRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Xplago_SigmaBank_RegisterResponse` message.
        func register(
            request: GRPCCore.ServerRequest<Xplago_SigmaBank_RegisterRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Xplago_SigmaBank_RegisterResponse>

        /// Handle the "Login" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > auth required
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Xplago_SigmaBank_LoginRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Xplago_SigmaBank_LoginResponse` message.
        func login(
            request: GRPCCore.ServerRequest<Xplago_SigmaBank_LoginRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Xplago_SigmaBank_LoginResponse>
    }

    /// Simple service protocol for the "xplago.sigma_bank.AuthService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    internal protocol SimpleServiceProtocol: Xplago_SigmaBank_AuthService.ServiceProtocol {
        /// Handle the "SendConfirmationCode" method.
        ///
        /// - Parameters:
        ///   - request: A `Xplago_SigmaBank_SendConfirmationCodeRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Xplago_SigmaBank_SendConfirmationCodeResponse` to respond with.
        func sendConfirmationCode(
            request: Xplago_SigmaBank_SendConfirmationCodeRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Xplago_SigmaBank_SendConfirmationCodeResponse

        /// Handle the "Confirm" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > auth required
        ///
        /// - Parameters:
        ///   - request: A `Xplago_SigmaBank_ConfirmRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Xplago_SigmaBank_ConfirmResponse` to respond with.
        func confirm(
            request: Xplago_SigmaBank_ConfirmRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Xplago_SigmaBank_ConfirmResponse

        /// Handle the "Register" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > auth required
        ///
        /// - Parameters:
        ///   - request: A `Xplago_SigmaBank_RegisterRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Xplago_SigmaBank_RegisterResponse` to respond with.
        func register(
            request: Xplago_SigmaBank_RegisterRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Xplago_SigmaBank_RegisterResponse

        /// Handle the "Login" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > auth required
        ///
        /// - Parameters:
        ///   - request: A `Xplago_SigmaBank_LoginRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Xplago_SigmaBank_LoginResponse` to respond with.
        func login(
            request: Xplago_SigmaBank_LoginRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Xplago_SigmaBank_LoginResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
extension Xplago_SigmaBank_AuthService.StreamingServiceProtocol {
    internal func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Xplago_SigmaBank_AuthService.Method.SendConfirmationCode.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Xplago_SigmaBank_SendConfirmationCodeRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Xplago_SigmaBank_SendConfirmationCodeResponse>(),
            handler: { request, context in
                try await self.sendConfirmationCode(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Xplago_SigmaBank_AuthService.Method.Confirm.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Xplago_SigmaBank_ConfirmRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Xplago_SigmaBank_ConfirmResponse>(),
            handler: { request, context in
                try await self.confirm(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Xplago_SigmaBank_AuthService.Method.Register.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Xplago_SigmaBank_RegisterRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Xplago_SigmaBank_RegisterResponse>(),
            handler: { request, context in
                try await self.register(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Xplago_SigmaBank_AuthService.Method.Login.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Xplago_SigmaBank_LoginRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Xplago_SigmaBank_LoginResponse>(),
            handler: { request, context in
                try await self.login(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension Xplago_SigmaBank_AuthService.ServiceProtocol {
    internal func sendConfirmationCode(
        request: GRPCCore.StreamingServerRequest<Xplago_SigmaBank_SendConfirmationCodeRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Xplago_SigmaBank_SendConfirmationCodeResponse> {
        let response = try await self.sendConfirmationCode(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func confirm(
        request: GRPCCore.StreamingServerRequest<Xplago_SigmaBank_ConfirmRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Xplago_SigmaBank_ConfirmResponse> {
        let response = try await self.confirm(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func register(
        request: GRPCCore.StreamingServerRequest<Xplago_SigmaBank_RegisterRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Xplago_SigmaBank_RegisterResponse> {
        let response = try await self.register(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func login(
        request: GRPCCore.StreamingServerRequest<Xplago_SigmaBank_LoginRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Xplago_SigmaBank_LoginResponse> {
        let response = try await self.login(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension Xplago_SigmaBank_AuthService.SimpleServiceProtocol {
    internal func sendConfirmationCode(
        request: GRPCCore.ServerRequest<Xplago_SigmaBank_SendConfirmationCodeRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Xplago_SigmaBank_SendConfirmationCodeResponse> {
        return GRPCCore.ServerResponse<Xplago_SigmaBank_SendConfirmationCodeResponse>(
            message: try await self.sendConfirmationCode(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func confirm(
        request: GRPCCore.ServerRequest<Xplago_SigmaBank_ConfirmRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Xplago_SigmaBank_ConfirmResponse> {
        return GRPCCore.ServerResponse<Xplago_SigmaBank_ConfirmResponse>(
            message: try await self.confirm(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func register(
        request: GRPCCore.ServerRequest<Xplago_SigmaBank_RegisterRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Xplago_SigmaBank_RegisterResponse> {
        return GRPCCore.ServerResponse<Xplago_SigmaBank_RegisterResponse>(
            message: try await self.register(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func login(
        request: GRPCCore.ServerRequest<Xplago_SigmaBank_LoginRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Xplago_SigmaBank_LoginResponse> {
        return GRPCCore.ServerResponse<Xplago_SigmaBank_LoginResponse>(
            message: try await self.login(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: xplago.sigma_bank.AuthService (client)

extension Xplago_SigmaBank_AuthService {
    /// Generated client protocol for the "xplago.sigma_bank.AuthService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    internal protocol ClientProtocol: Sendable {
        /// Call the "SendConfirmationCode" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Xplago_SigmaBank_SendConfirmationCodeRequest` message.
        ///   - serializer: A serializer for `Xplago_SigmaBank_SendConfirmationCodeRequest` messages.
        ///   - deserializer: A deserializer for `Xplago_SigmaBank_SendConfirmationCodeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func sendConfirmationCode<Result>(
            request: GRPCCore.ClientRequest<Xplago_SigmaBank_SendConfirmationCodeRequest>,
            serializer: some GRPCCore.MessageSerializer<Xplago_SigmaBank_SendConfirmationCodeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Xplago_SigmaBank_SendConfirmationCodeResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Xplago_SigmaBank_SendConfirmationCodeResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Confirm" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > auth required
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Xplago_SigmaBank_ConfirmRequest` message.
        ///   - serializer: A serializer for `Xplago_SigmaBank_ConfirmRequest` messages.
        ///   - deserializer: A deserializer for `Xplago_SigmaBank_ConfirmResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func confirm<Result>(
            request: GRPCCore.ClientRequest<Xplago_SigmaBank_ConfirmRequest>,
            serializer: some GRPCCore.MessageSerializer<Xplago_SigmaBank_ConfirmRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Xplago_SigmaBank_ConfirmResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Xplago_SigmaBank_ConfirmResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Register" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > auth required
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Xplago_SigmaBank_RegisterRequest` message.
        ///   - serializer: A serializer for `Xplago_SigmaBank_RegisterRequest` messages.
        ///   - deserializer: A deserializer for `Xplago_SigmaBank_RegisterResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func register<Result>(
            request: GRPCCore.ClientRequest<Xplago_SigmaBank_RegisterRequest>,
            serializer: some GRPCCore.MessageSerializer<Xplago_SigmaBank_RegisterRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Xplago_SigmaBank_RegisterResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Xplago_SigmaBank_RegisterResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Login" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > auth required
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Xplago_SigmaBank_LoginRequest` message.
        ///   - serializer: A serializer for `Xplago_SigmaBank_LoginRequest` messages.
        ///   - deserializer: A deserializer for `Xplago_SigmaBank_LoginResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func login<Result>(
            request: GRPCCore.ClientRequest<Xplago_SigmaBank_LoginRequest>,
            serializer: some GRPCCore.MessageSerializer<Xplago_SigmaBank_LoginRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Xplago_SigmaBank_LoginResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Xplago_SigmaBank_LoginResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "xplago.sigma_bank.AuthService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    internal struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "SendConfirmationCode" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Xplago_SigmaBank_SendConfirmationCodeRequest` message.
        ///   - serializer: A serializer for `Xplago_SigmaBank_SendConfirmationCodeRequest` messages.
        ///   - deserializer: A deserializer for `Xplago_SigmaBank_SendConfirmationCodeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func sendConfirmationCode<Result>(
            request: GRPCCore.ClientRequest<Xplago_SigmaBank_SendConfirmationCodeRequest>,
            serializer: some GRPCCore.MessageSerializer<Xplago_SigmaBank_SendConfirmationCodeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Xplago_SigmaBank_SendConfirmationCodeResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Xplago_SigmaBank_SendConfirmationCodeResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Xplago_SigmaBank_AuthService.Method.SendConfirmationCode.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Confirm" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > auth required
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Xplago_SigmaBank_ConfirmRequest` message.
        ///   - serializer: A serializer for `Xplago_SigmaBank_ConfirmRequest` messages.
        ///   - deserializer: A deserializer for `Xplago_SigmaBank_ConfirmResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func confirm<Result>(
            request: GRPCCore.ClientRequest<Xplago_SigmaBank_ConfirmRequest>,
            serializer: some GRPCCore.MessageSerializer<Xplago_SigmaBank_ConfirmRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Xplago_SigmaBank_ConfirmResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Xplago_SigmaBank_ConfirmResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Xplago_SigmaBank_AuthService.Method.Confirm.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Register" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > auth required
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Xplago_SigmaBank_RegisterRequest` message.
        ///   - serializer: A serializer for `Xplago_SigmaBank_RegisterRequest` messages.
        ///   - deserializer: A deserializer for `Xplago_SigmaBank_RegisterResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func register<Result>(
            request: GRPCCore.ClientRequest<Xplago_SigmaBank_RegisterRequest>,
            serializer: some GRPCCore.MessageSerializer<Xplago_SigmaBank_RegisterRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Xplago_SigmaBank_RegisterResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Xplago_SigmaBank_RegisterResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Xplago_SigmaBank_AuthService.Method.Register.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Login" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > auth required
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Xplago_SigmaBank_LoginRequest` message.
        ///   - serializer: A serializer for `Xplago_SigmaBank_LoginRequest` messages.
        ///   - deserializer: A deserializer for `Xplago_SigmaBank_LoginResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func login<Result>(
            request: GRPCCore.ClientRequest<Xplago_SigmaBank_LoginRequest>,
            serializer: some GRPCCore.MessageSerializer<Xplago_SigmaBank_LoginRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Xplago_SigmaBank_LoginResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Xplago_SigmaBank_LoginResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Xplago_SigmaBank_AuthService.Method.Login.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Xplago_SigmaBank_AuthService.ClientProtocol {
    /// Call the "SendConfirmationCode" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Xplago_SigmaBank_SendConfirmationCodeRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func sendConfirmationCode<Result>(
        request: GRPCCore.ClientRequest<Xplago_SigmaBank_SendConfirmationCodeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Xplago_SigmaBank_SendConfirmationCodeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.sendConfirmationCode(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Xplago_SigmaBank_SendConfirmationCodeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Xplago_SigmaBank_SendConfirmationCodeResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Confirm" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > auth required
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Xplago_SigmaBank_ConfirmRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func confirm<Result>(
        request: GRPCCore.ClientRequest<Xplago_SigmaBank_ConfirmRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Xplago_SigmaBank_ConfirmResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.confirm(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Xplago_SigmaBank_ConfirmRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Xplago_SigmaBank_ConfirmResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Register" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > auth required
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Xplago_SigmaBank_RegisterRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func register<Result>(
        request: GRPCCore.ClientRequest<Xplago_SigmaBank_RegisterRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Xplago_SigmaBank_RegisterResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.register(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Xplago_SigmaBank_RegisterRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Xplago_SigmaBank_RegisterResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Login" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > auth required
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Xplago_SigmaBank_LoginRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func login<Result>(
        request: GRPCCore.ClientRequest<Xplago_SigmaBank_LoginRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Xplago_SigmaBank_LoginResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.login(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Xplago_SigmaBank_LoginRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Xplago_SigmaBank_LoginResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Xplago_SigmaBank_AuthService.ClientProtocol {
    /// Call the "SendConfirmationCode" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func sendConfirmationCode<Result>(
        _ message: Xplago_SigmaBank_SendConfirmationCodeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Xplago_SigmaBank_SendConfirmationCodeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Xplago_SigmaBank_SendConfirmationCodeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.sendConfirmationCode(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Confirm" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > auth required
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func confirm<Result>(
        _ message: Xplago_SigmaBank_ConfirmRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Xplago_SigmaBank_ConfirmResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Xplago_SigmaBank_ConfirmRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.confirm(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Register" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > auth required
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func register<Result>(
        _ message: Xplago_SigmaBank_RegisterRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Xplago_SigmaBank_RegisterResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Xplago_SigmaBank_RegisterRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.register(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Login" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > auth required
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func login<Result>(
        _ message: Xplago_SigmaBank_LoginRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Xplago_SigmaBank_LoginResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Xplago_SigmaBank_LoginRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.login(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}